We decided to implement configuration options as attributes of a class Config, which can be accessed from anywhere in the program. This means our configuration options are global parameters. We preferred this over parameter passing because that would involve adding a lot of booleans to method headers, and would hinder runtime variability, since we work with multiple classes and threads that would need to communicate changes to each other in some way. By checking shared configuration options in a centralized place, changes can immediately take effect.

The user can change configuration at runtime via the /config command. For example, typing "/config colors false" in chat turns off showing colors in other users' messages, and typing "/config chatlog true" turns on the logging feature. A user can simply type "/config" to show all configuration options and their current values. There is currently no risk of invalid feature selections, but if this were to occur (for example, adding options to prevent receiving either encrypted or unencrypted messages, both being off being an invalid configuration) we would warn the user when they try to change to this configuration and, if possible, automatically fix the configuration.

We have not yet added configuration for the authentication feature for now. Making this configurable would mean adding new types of messages that the server would need to exchange, and would require major structural changes on the client side to handle whether the server has the authentication feature turned on or not, which also reduces simplicity of the application.
